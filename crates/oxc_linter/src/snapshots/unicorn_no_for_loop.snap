---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ eslint-plugin-unicorn(no-for-loop): Use a `for-of` loop instead of this classical `for` loop.
   ╭─[no_for_loop.tsx:2:9]
 1 │ const positions = []; 
 2 │         for (let i = 0; i < positions.length; i++) {
   ·         ───
 3 │                 let last: vscode.Position | vscode.Range = positions[i];
   ╰────
  help: Rewrite the loop as `for (const el of array) { … }`

  ⚠ eslint-plugin-unicorn(no-for-loop): Use a `for-of` loop instead of this classical `for` loop.
   ╭─[no_for_loop.tsx:2:9]
 1 │ const positions = [];
 2 │         for (let i = 0; i < positions.length; i++) {
   ·         ───
 3 │                 const    last   /* comment */    : /* comment */ Position = positions[i];
   ╰────
  help: Rewrite the loop as `for (const el of array) { … }`

  ⚠ eslint-plugin-unicorn(no-for-loop): Use a `for-of` loop instead of this classical `for` loop.
   ╭─[no_for_loop.tsx:2:9]
 1 │ const positions = [];
 2 │         for (let i = 0; i < positions.length; i++) {
   ·         ───
 3 │                 let last: vscode.Position | vscode.Range = positions[i];
   ╰────
  help: Rewrite the loop as `for (const el of array) { … }`

  ⚠ eslint-plugin-unicorn(no-for-loop): Use a `for-of` loop instead of this classical `for` loop.
   ╭─[no_for_loop.tsx:2:9]
 1 │ const arr = [];
 2 │         for (let i = 0; i < arr.length; i += 1) {
   ·         ───
 3 │                 console.log(arr[i])
   ╰────
  help: Rewrite the loop as `for (const el of array) { … }`

  ⚠ eslint-plugin-unicorn(no-for-loop): Use a `for-of` loop instead of this classical `for` loop.
   ╭─[no_for_loop.tsx:2:9]
 1 │ const plugins = [];
 2 │         for (let i = 0; i < plugins.length; i++) {
   ·         ───
 3 │                 let plugin = plugins[i];
   ╰────
  help: Rewrite the loop as `for (const el of array) { … }`

  ⚠ eslint-plugin-unicorn(no-for-loop): Use a `for-of` loop instead of this classical `for` loop.
   ╭─[no_for_loop.tsx:2:9]
 1 │ const array = [];
 2 │         for (
   ·         ───
 3 │                 let i = 0;
   ╰────
  help: Rewrite the loop as `for (const el of array) { … }`

  ⚠ eslint-plugin-unicorn(no-for-loop): Use a `for-of` loop instead of this classical `for` loop.
   ╭─[no_for_loop.tsx:2:9]
 1 │ const array = [];
 2 │         for (let i = 0; i < array.length; i++) {
   ·         ───
 3 │                 let foo = array[i];
   ╰────
  help: Rewrite the loop as `for (const el of array) { … }`

  ⚠ eslint-plugin-unicorn(no-for-loop): Use a `for-of` loop instead of this classical `for` loop.
   ╭─[no_for_loop.tsx:2:9]
 1 │ const array = [];
 2 │         for (let i = 0; i < array.length; i++) {
   ·         ───
 3 │                 const foo = array[i];
   ╰────
  help: Rewrite the loop as `for (const el of array) { … }`

  ⚠ eslint-plugin-unicorn(no-for-loop): Use a `for-of` loop instead of this classical `for` loop.
   ╭─[no_for_loop.tsx:2:9]
 1 │ const array = [];
 2 │         for (let i = 0; i < array.length; i++) {
   ·         ───
 3 │                 var foo = array[i], bar = 1;
   ╰────
  help: Rewrite the loop as `for (const el of array) { … }`
